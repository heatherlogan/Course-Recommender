{		
	"courses" : [	
		{
			"Name" : "Accelerated Natural Language Processing",
			"Code" : "INFR11125",
			"Credits" : "20",
			"Level" : "11",
			"Year" : "6",
			"Average" : "64.96",
			"Area" : "Artificial Intelligence",
			"Prerequisites" : [],
			"Feedback" : ["Although the class might seem very difficult at first, if you put the effort in, it will get easier with time. Depending on your background, it might feel impossible for the first few weeks, but just keep with it!",
						  "I really enjoyed this course, I learned a lot. Although, I would highly recommend reading about linguistics before starting the course to make your life easier. It was very challenging, especially at the beginning.",
						  "Start early, try to keep up with the course content. You don't have to get deep understanding for each topic. Assignment 1 seems easy but people usually get less marks because of how they have written the reports.",
						  "Tough, fair, engaging."],
			"Summary" : "The course will synthesize ideas from linguistics and computer science to provide students with a fast-paced introduction to the field of natural language processing. The course will cover the most widely-used theoretical and computational models of language, including both statistical and nonstatistical approaches. The course will familiarize students with a wide range of linguistic phenomena with the aim of appreciating the complexity, but also the systematic behaviour of natural languages like English, the pervasiveness of ambiguity, and how this presents challenges in natural language processing. In addition, the course introduce the most important algorithms and data structures that are commonly used to solve many NLP problems. The course will cover formal models for representing and analyzing the syntax and semantics of words, sentences, and discourse. Students will learn how to analyse sentences algorithmically, using hand-crafted and automatically induced treebank grammars, and how to build interpretable semantic representations. The course will also cover a number of standard models and algorithms that are used throughout language processing. Examples include n-gram and Hidden Markov Models, the EM algorithm, and dynamic programming algorithms such as chart parsing.",
			"Course Description" : "Part I: Words * Inflectional and derivational morphology * Finite state methods and Regular expressions * Word Classes and Parts of speech * Sequence Models (n-gram and Hidden Markov models, smoothing) * The Viterbi algorithm, Forward Backward, EM Part II: Syntax * Syntactic Concepts (e.g., constituency, subcategorisation, bounded and unbounded dependencies, feature representations) * Analysis in CFG - Greedy algorithms---Shift-reduce parsing * Divide-and-conquer algorithms---CKY * Chart parsing * Lexicalised grammar formalisms (e.g., TAG, CCG, dependency grammar) * Statistical parsing (PCFGs, dependency parsing) Part III: Semantics, Discourse, Dialogue and Applications * logical semantics and compositionality * Semantic derivations in grammar * Lexical Semantics (e.g., word senses, semantic roles) * Discourse and dialogue (e.g., anaphora, speech acts) * Text classification and sentiment analysis * Other applications (e.g., machine translation, question answering) Methodological topics, interspersed throughout: * Issues in annotation and evaluation * Machine learning approaches (e.g., Maximum Entropy models, neural networks)"
		},
		{
			"Name" : "Advanced Databases",
			"Code" : "INFR11011",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "72.23",
			"Area" : "Data Science",
			"Prerequisites" : [],
			"Feedback" : ["Quality course, interesting material, well taught, would recommend.",
						  "Clear explanation of how database works",
						  "The lecturer really seemed to care about the quality of his teaching, and it fully paid off"],
			"Summary" : "This course aims at furthering database systems concepts through adding complexity and a more hands-on approach. In particular, we will focus on supporting multi-dimensional data in a DBMS, query optimisation, query evaluation, transaction processing and concurrency control in both a centralised and a distributed context. In terms of centralised databases, we shall start from single and multi-dimensional indexing methods, move on to join evaluation algorithms, and talk about query opimisation paradigms. We shall then focus on the issues of transaction processing, concurrency control and crash recovery. Finally, we shall revisit the previous issues in a distributed database environment.",
			"Course Description" : "* B-trees, hash-based indexes, R-trees. * Indexing structures for solid state and main memory. * Query evaluation: sorting and join processing, aggregation * Algorithmic adjustments for flash memory and main-memory systems. * Query optimisation: cost-based query optimisation, dynamic programming, randomised exploration, rule-based optimisation. * Concurrency and recovery: transactions, lock tables, main-memory concurrency control, recovery using the ARIES algorithm. * Parallel databases: parallel query evaluation, parallel and distributed transaction processing."
		},
		{
			"Name" : "Algorithmic Game Theory and its Applications",
			"Code" : "INFR11020",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "65.70",
			"Area" : "Algorithms and Data Structures",
			"Prerequisites" : [],
			"Feedback" : ["Be prepared for complex notation. However, if you put in the effort, the underlying concepts are not as hard as the notation would suggest.",
						  "Interesting and challenging course if you're not afraid of abstract definitions and heavy formalism.",
						  "This course is not for everybody; do a check and be sure you want to take this"],
			"Summary" : "Game theory is the formal study of interaction between self-interested (or goal-oriented) systems (or agents or decision makers or players), & strategic scenarios that arise in such settings. It began life in Economics in the 1940's with the work of von Neumann & Morgenstern, but has since been applied to an extraordinary range of subjects, including political science, evolutionary biology & even to inspection regimes for arms control. Game theory has for years also played an important, if less recognized, role in several branches of computer science. Applications within computer science include the use of games in automated verification & model checking to model computing systems in an unknown and possibly adverse environment. In AI games are applied to the analysis of multi-agent systems. Recently, with the advent of the internet and e-commerce, many game theoretic questions in the interplay between economics & computing have received extensive attention. These include electronic auctions, & more generally mechanism design questions (inverse game theory) related to finding incentive structures for cooperation between independent entities on the internet. Wherever game theory plays a quantitative role, algorithmic and computational questions related to solving games are also of central importance. This course aims to bring together as a coherent body of knowledge the game theoretic algorithms & models that underpin several flourishing subjects at the intersection of computer science, economics and e-commerce, & AI.",
			"Course Description" : "* Examples of diverse games. * Zero-sum two-person games: LP, simplex, LP-duality, mixed strategies and the minimax theorem. * General games in strategic form: * Equilibria and Nash's theorem. * 2-player equilibria: Lemke-Howson algorithm and its variants. * Games in Extensive form (mainly zero-sum, perfect information): * Game trees. Relation to Strategic games. * And/Or game graphs and reachability games. * bisimulation, simulation, parity games, and other omega-games on automata(finitely presented, infinite duration games). * mean value games, MDPs, and stochastic games. * Mechanism design and inverse game theory: designing games where selfish players will behave as desired. * Vickery auctions and other mechanisms. * Combinatorial auctions. * Incentive structures for the internet. "
		},
		{
			"Name" : "Automatic Speech Recognition",
			"Code" : "INFR11033",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "62.77",
			"Area" : "Artificial Intelligence",
			"Prerequisites" : [],
			"Feedback" : ["If you haven't taken Speech Processing, review materials from that course if possible. It's highly relevant.",
						  "Great lectures, the lectures were interesting, readings were relevant and helped better understand the material covered.",
						  " Working through the coursework was frustrating (because Kaldi is frustrating), but it really helped solidify the material that was covered in class"],
			"Summary" : "This course covers the theory and practice of automatic speech recognition (ASR), with a focus on the statistical approaches that comprise the state of the art. The course introduces the overall framework for speech recognition, including speech signal analysis, acoustic modelling using hidden Markov models, language modelling and recognition search. Advanced topics covered will include speaker adaptation, robust speech recognition and speaker identification. The practical side of the course will involve the development of a speech recognition system using a speech recognition software toolkit.",
			"Course Description" : "* Signal analysis for ASR * Statistical pattern recognition (Bayes decision theory, Learning algorithms, Evaluation methods, Gaussian mixture model, and EM algorithm) * Hidden Markov Models (HMM) * Context-dependent models * Discriminative training * Language models for LVCSR (large vocabulary continuous speech recognition) * Decoding * Robust ASR (Robust features Noise reduction, Microphone arrays) * Adaptation (Noise adaptation, Speaker adaptation/normalization, Language model adaptation) * Speaker recognition * History of speech recognition * Advanced topics (Using prosody for ASR, Audio-visual ASR, Indexing, Bayesian network) * speech recognition applications (including privacy implications)"
		},
		{
			"Name" : "Blockchains and Distributed Ledgers",
			"Code" : "INFR11144",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "72.49",
			"Area" : "Blockchains",
			"Prerequisites" : [],
			"Feedback" : [" Begin the coursework early to have time for exploration if you're not familiar with programming smart contracts or interacting with blockchains in general.",
						  " If you are interested in blockchain technology/ distributed applications the course won't let you down. It is good course explaining the high-level concepts of blockchain technology from multiple standpoints. The course is not particularly demanding in demanding terms of a mathematical background but requires a lot of critical thinking. The course complements really well with the course Introduction to Modern Cryptography. If a student takes both courses he will have a good foundation on Blockchain and he will be able to perform individual research on the subject.",
						  "The course covers blockchain technology from all perspectives and gives you multiple ways to approach the subject"],
			"Summary" : "Blockchain technology and distributed ledgers have been hailed as a turning point in scaling information technology services at a global level. Although the digital currency Bitcoin is the best-known Blockchain application today, the technology is set to play a much broader role in cyber security innovation. This course is an introduction to the design and analysis of blockchain systems and distributed ledgers and is meant to be taught in parallel to the Introduction to Modern Cryptography course of the same level (INFR11131) every other year (with the latter course as a prerequisite or co-requisite).",
			"Course Description" : "Syllabus: 1. Introduction to blockchain. What is a distributed ledger. Transactions. Digital Signatures. 2. The consensus layer. Basic Properties. Proof of Work. 3. Robust Transaction Ledgers. Properties and Objectives. Permissioned, permissionless ledgers. 4. Privacy Issues. Anonymity, Pseudonymity, Unlinkability. Zero-Knowledge Proofs. 5. Scalability Issues. Byzantine agreement protocols. 6. Blockchain as a platform. Smart Contracts. 7. Secure multiparty computation techniques and their application to blockchain protocols. 8. Alternative techniques to proof of work for blockchain protocols, proof of stake/space. 9. Game theoretic analysis of blockchain protocols. 10. Name and object registries. Reputation systems. Policy issues related to blockchain."
		},
		{
			"Name": "Compiler Optimisation",
			"Code" : "INFR11032",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "67.42",
			"Area" : "Programming Language",
			"Prerequisites" : [],
			"Feedback" : ["Don't take other time-consuming courses, there will not be enough time",
						  "Only take it if you are really interested in compilers.",
						  "Broad range of very challenging topics. Hugh is very keen to answer questions."],
			"Summary" : "This course introduces students to modern techniques in efficient implementation of programming languages. Modern processors and systems are designed based on the assumption that a compiler will be able to effectively exploit architectural resources. This course will examine in detail techniques to exploit instruction level parallelism, memory hierarchy and higher level parallelism. It will examine classic static analysis approaches to these problems and introduce newer feedback directed and dynamic approaches to optimisation. The course work will require students to implement selected optimisations in a research compiler and critically review literature in compiler optimisation.",
			"Course Description" : "*Compiler Construction, phase order, compilation as optimisation *Architecture costs: Parallelism and Latency in uni and multi-processors *Architecture independent optimisation, dataflow analysis, lattices and fixed points *Code generation, register allocation and scheduling in superscalar and vliw processors *High level analysis based on dependence analysis. Intra and inter procedural analysis, whole program analysis. *High level transformations including linear algebraic formalisation, unimodular transformations and space/time representation *Automated parallelisation. shared and distributed memory models. Linear algebraic approach to parallelisation. *Adaptive optimisation: Feedback directed optimisation, iterative compilation, program specialisation and dynamic compilation eg JIT, DBT *Compiler infrastructure case studies: SUIF, Machine SUIF, JIKES *Current themes:low power compilation, automatic compiler generation and machine learning."
		},
		{
			"Name": "Computer Animation & Visualisation",
			"Code" : "INFR11067",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "69.23",
			"Area" : "Graphics",
			"Prerequisites" : [],
			"Feedback" : ["Taking Computer Graphics as well helps with the understanding of basic concepts",
						  "The lecturer was amazing as he explained the content in an understandable way.",
						  "Coursework is too hard. Why we have to use software we never used before?"],
			"Summary" : "Two major topics of Visualisation and Computer Animation are covered in this course. Visualization is a cognitive process using the powerful information processing and analytical functions of the human vision system. It has always been a major factor in scientific progress and now, with the assistance of computer graphics, it extends our vision system from sub-atomic to interstellar dimensions and allows geometric representations and simulations of any multidimensional dataset. The fundamental objective is to acquire new knowledge rather than generating pictures. This part is very practical and techniques will be illustrated with applications in the scientific, engineering and medical domains. The increasingly important field of information visualisation and visual data-mining will also be covered.",
		 	"Course Description" : "* Visualisation: definition and motivation. * Data representation: geometric abstractions; volume and surface representations, interpolation. * Fundamental algorithms: colour mapping; contouring; glyphs; volume rendering. * Advanced algorithms: flow visualisation, vector visualisation, tensor visualisation. * Advanced topics of Computer Graphics: Visualisation of environments, data processing. * Character Animation techniques: keyframe animation, inverse kinematics, facial animation, PD-control, flocking, crowd simulation. * Motion capture technologies: optical, magnetic, mechanical, gyrosensors. * Optimization-based techniques: space-time constraints, Laplacian distance shape deformation. * Physically based animation techniques: fluid animation, hair animation, cloth simulation, deformable objects."
		},
		{
			"Name": "Extreme Computing",
			"Code" : "INFR11088",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "63.93",
			"Area" : "Problem Solving",
			"Prerequisites" : [],
			"Feedback" : ["Be prepared to learn the material by yourself",
						  "I would think twice before choosing this course. In my opinion, EXC is a poorly organised course but I am hopeful that things can be improved. The slides were a high-level view of the course. Unfortunately, at lectures not much more relevant content was presented by the lecturers.",
						  "Worthwhile, useful and a bit challenging",
						  "Start the coursework early and ask questions!"],
			"Summary" : "Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, privacy etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, rudimentary data processing, machine learning, data streaming).",
			"Course Description" : "The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows: * Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling, performance, privacy, economics, security, software as service. * Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services. * Data structures and algorithms: decentralised data structures (e.g., peer-to-peer systems); programming frameworks (e.g., Hadoop Map/Reduce); workflow languages (e.g., FlumeJava); design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams. The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problem"
		},
		{
			"Name": "Human-Computer Interaction",
			"Code" : "INFR11017",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "78.86",
			"Area" : "Problem Solving",
			"Prerequisites" : [],
			"Feedback" : ["A very well-organised course for student who want to go into human-computer interaction or UX design.",
						  "It is different from the usual Computer Science courses but it is useful for work.",
						  "Strongly recommend this course if student is interested in design.",
						  "Plan enough time for the coursework as it seems easy in the beginning, but requires much time to complete."],
			"Summary" : "The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical.",
			"Course Description" : "* Background--the development and scope of HCI. Practical goals. * HCI relevant issues in human perception, memory and thinking processes. * Approaches to designing information appliances--software objects and physical things. * Design methodologies and notations--levels of interface design. Task analysis, grammars, state charts. * Techniques and technologies--dialogue styles, information presentation, protocols for human-to-machine and machine-to-machine interactions; mobile computing, distributed wireless computation, wireless sensors. * The design process--user involvement, iterative design, prototyping. * Evaluation--methodologies, formative and summative. Performance analysis. * Specific issues in HCI: the internet of things; novel interfaces. * A theme running through the course is the relevance of the social context on Interaction Design."
		},
		{
			"Name": "Introduction to Modern Cryptography",
			"Code" : "INFR11131",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "63.93",
			"Area" : "Security and Cryptography",
			"Prerequisites" : [],
			"Feedback" : ["The lecture notes are very well structured. I found them useful and well-explained.",
						  "Only take this course if you have strong foundations in proofs and probability theory, and make sure to take good notes during class and ask questions whenever explanations are not clear",
						  "Very mathematical. This course is about why (mathematically) something is cryptographically secure.",
						  "Interesting topic."],
			"Summary" : "Cryptography is the formal study of the notion of security in information systems. The course will offer a thorough introduction to modern cryptography focusing on models and proofs of security for various basic cryptographic primitives and protocols including key exchange protocols, commitment schemes, digital signature algorithms, oblivious transfer protocols and public-key encryption schemes. Applications to various problems in secure computer and information systems will be briefly discussed including secure multiparty computation, digital content distribution, e-voting systems, digital payment systems, cryptocurrencies.",
			"Course Description" : "The area of cryptography focuses on various problems pertaining to secure communication and computation. It entails the study of models that express security properties as well as the algorithms and protocols that are the implementation candidates for satisfying these properties. An important dimension of modern cryptography is the design of security proofs that establish security properties. Such proofs are conditional on assumptions that fall in two categories: 'system assumptions' such as the faithful execution of code, or the availability of private randomness and 'computational assumptions' that are related to the computational complexity of various problems (including factoring large numbers and others). Students will learn to model security problems, design protocols and prove them secure under precisely formulated system and computational assumptions."
		},
		{
			"Name": "Introduction to Quantum Computing",
			"Code" : "INFR11099",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "67.00",
			"Area" : "Theory of Computation",
			"Prerequisites" : ["Introduction to Linear Algebra", "Probability with Applications"],
			"Feedback" : ["This is a great introduction to quantum computing that would probably be difficult to get introduced to otherwise",
						  "Keep up with the subjects from the beginning. Otherwise it is nearly impossible to follow the next lectures, and learning the stuff completely at home is hard",
						  "Both the lectures and tutorials were fantastic."],
			"Summary" : "The aim of this course is to give students a basic overview of the rapidly growing field of Quantum Computation (QC). The course will start with a brief introduction of the mathematical framework of QC. The two models of quantum circuit and measurement-based quantum computing, will be introduced. Through these models various key concepts in QC such as entanglement and teleportation will be discussed. In order to compare QC and classical computing, simple quantum algorithms with their complexity analysis will be presented. We finish the course by highlighting the recent development of the field in secure delegated QC.",
			"Course Description" : "- Basic concepts from Linear Algebra necessary for understanding the axioms of Quantum Mechanics - Axioms of Quantum Mechanics, describing quantum system, quantum operators, composition, entanglement and measurements - The no cloning, no deleting theorems and the consequences for computation - Quantum Computing via quantum circuit model: Description of qubit and universal set of gates. - Quantum space and depth complexity and oracle model - Classical simulation of quantum circuit and Gottesman-Knill Theorem - Quantum Algorithms: Groverżs Search and Deutsch-Jozsa problem - The first quantum protocols: Quantum teleportation and super dense coding - Quantum Computing via measurement-based model: Description of graph state and measurement calculus - Advanced Topics: Information flow in measurement-based model, unconditionally secure quantum cloud computing"
		},
		{
			"Name": "Machine Learning Practical",
			"Code" : "INFR11132",
			"Credits" : "20",
			"Level" : "11",
			"Year" : "4",
			"Average" : "74.14",
			"Area" : "Artificial Intelligence",
			"Prerequisites" : [],
			"Feedback" : ["Pick something nice for the group project and you'll have a good time. Also install conda with Intel's MKL libraries for nonpotato speed when training neural nets.",
						  "Start work on the assignments as early as possible. It will take a while to get your code working, and then you still need plenty of time to run the experiments.",
						  "This is more like a 30 unit course (15 units per semester) - it is a lot of work but worth it in the end I think",
						  "I really learned a lot. This course requires far more work than any other course and the weeks before the deadlines are very stressful, but it is incredibly instructive, both in terms of deep learning and research skills (organisation, writing...). Instructors were very responsive and made themselves available."],
			"Summary" : "This course is focused on the implementation and evaluation of machine learning systems, and is lab-based. Students who do this course will obtain experience in the design, implementation, training, and evaluation of machine learning systems. Semester one comprises lectures, labs, and individual coursework. Semester two is based around small group projects, and also includes tutorials and guest lectures. This 20 credit course replaces INFR11119 Machine Learning Practical (10 credits). Note: this course is not a stand-alone introduction to machine learning. Please see Other Requirements for details.",
			"Course Description" : "The course covers practical aspects of machine learning, and will focus on practical and experimental issues in deep learning and neural networks. Topics that are covered include: * Optimisation and learning rules * Regularisation and normalisation * Neural networks for classification * Convolutional Neural Networks * Recurrent Neural Networks MLP is coursework-based, with lectures to support the additional material required to carry out the practical. Students who complete this course will have experience in the design, implementation, training, and evaluation of machine learning systems. MLP is a two-semester course. During semester 1 the course will focus on developing a deep learning framework based on experiments using the task of classification of handwritten digits using the well-known MNIST dataset. The course uses a Python software framework, and a series of Jupyter notebooks. There is a series of ten weekly lectures in semester 1 to provide the required theoretical support to the practical work. Semester 2 will be based on small group projects, with a focus on using deep neural networks within the context of a miniproject, using an open source toolkit such as TensorFlow or PyTorch. Lectures in semester 2 will support the coursework, and also provide insights to the current state of the art in this very fast moving area."
		},
		{
			"Name": "Machine Learning and Pattern Recognition",
			"Code" : "INFR11130",
			"Credits" : "20",
			"Level" : "11",
			"Year" : "4",
			"Average" : "59.44",
			"Area" : "Artificial Intelligence",
			"Prerequisites" : [],
			"Feedback" : ["Have some background knowledge before move in and prepare your math to a suitable level.",
						  "It has high demand of mathematics, but really worth taking for those who want to do research or work in machine learning area.",
						  "It is a very interesting course with quite a lot of material covered.",
						  "MLPR is a hard course and requires high level of math and coding",
						  "Spend more time on it"],
			"Summary" : "Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods. This is an advanced course. Students should not choose this class without the required background (see Other Requirements box); students without this background are strongly advised to take a more practical-based course, such as Introduction to Applied Machine Learning (INFR10063). This 20 credit course replaces Machine Learning & Pattern Recognition (Level 11) (INFR11073) - 10 credit course.",
			"Course Description" : "The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable. - Classification and Regression: Linear Regression, logistic regression, Bayes classifiers - Expanded feature representations: Basis functions, neural networks, kernel methods - Generalization, regularization and inference: Penalized cost functions, Bayesian prediction, learning theory - Model selection, pruning and combination: Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods. - Representation and metric learning: dimensionality reduction, clustering, feature learning  To support these topics we will also cover: - Optimization and Inference algorithms: Stochastic gradient descent, simple Monte Carlo ideas, and more specialized methods as required. Practical issues: - Formulating problems as machine learning, adapting methods to fit problems. - Numerical and programming issues important for machine learning. - Ethical issues, such as responsible application of methods and privacy concerns."
		},
		{
			"Name": "Performance Modelling",
			"Code" : "INFR11082",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "69.25",
			"Area" : "Graphics",
			"Prerequisites" : [],
			"Feedback" : ["Introduction to modelling systems and evaluate their performance. Good course for this high-level reasoning and formalism.",
						  "Just do it! Coursework and classwork are engaging, flipped classroom model works really well and you feel really engaged with the lecturer!",
						  "A lot of hands on problem solving with real modelling tools.",
						  "Video lectures and organization was very good"],
			"Summary" : "This course teaches various aspects of computer-aided modelling for performance evaluation of (stochastic) dynamic systems. The main focus is on stochastic modelling of computer systems and communication networks to assess performance characteristics such as throughput, response time etc.; however other dynamic systems such as manufacturing systems may also be considered. The central concept of the course will be that a model is as an abstract representation of a system which can be used as a tool to derive information about dynamic behaviour of the system. The more detail we invest in the model, the more sophisticated the information we can extract from it. As the course progresses the model will become increasingly detailed; the corresponding solution techniques will similarly become more complex, relying on increasing levels of computer assistance.",
			"Course Description" : "*Modelling and performance evaluation: models as tools; equilibrium and transient behaviour; analytic vs. algorithmic models. Revision of basic probability concepts. *Making use of models: deriving performance measures from an equilibrium distribution; choosing the parameters for a model; measurement and workload modelling; experimentation. *Representing systems directly as analytic models: operational laws such as Little's Law, simple queues and Markov processes; solving equations to find equilibrium behaviour. *Representing systems as algorithmic models: process-oriented and event-oriented simulation, variance reduction and stopping conditions. *High-level modelling languages: the stochastic process algebra PEPA, stochastic Petri nets and networks of queues."
		},
		{
			"Name": "Parallel Programming Languages and Systems",
			"Code" : "INFR11023",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "67.84",
			"Area" : "Programming Language",
			"Prerequisites" : [],
			"Feedback" : ["Good course.", "Lectures give a good introduction, but expect to practise on your own if you want to truly master concurrent programming.", "Clear explanation of fundamental concepts, neat (and printed!) overheads and organisation of the course",
						  "Well-established lecture materials and a good lecturer."],
			"Summary" : "The module familiarises students with the issues involved in designing, implementing and applying parallel programming systems. Initial motivation will be provided by consideration of a number of typical high performance applications and parallel architectures. This will highlight the role of parallel software systems as a means of bridging the gap between these and allow abstraction of the issues which must be addressed by any such system (partitioning, communication, agglomeration, scheduling). It will explore the ways in which these challenges have been addressed by a range of systems, including both de facto standards and more adventurous research projects.",
			"Course Description" : "* Introduction. Conceptual and architectural models of parallelism. Parallel algorithmic paradigms and simple parallel algorithms.Iterative, recursive pipeline and bag-of-task parallelism. * Realisation in Pthreads and Java. * Issues in message passing programming. Channels and synchronization models. * Realisation in MPI: communicators, simple and collective operations * Selected case studies highlighting alternative approaches, for example, * Associative models. Linda, tuple space and related primitives. * Threading Building Blocks."
		},
		{
			"Name": "Principles and Design of IoT Systems",
			"Code" : "INFR11150",
			"Credits" : "20",
			"Level" : "11",
			"Year" : "4",
			"Average" : "65.5",
			"Area" : "Problem Solving",
			"Prerequisites" : [],
			"Feedback" : ["Its a lot of work because you need to go from the sensor board (c++) to the android app (java) and merge everything, plus write a report and a presentation. However, take it, not many people out there knows how to use sensors for doing real time analytics.",
						  "The practical implementation of this course provides the students with on hands experience with IoT systems. This is a very interesting course and exciting one. There is no much pressure on the students, they are given time to think about approaches to take to complete the practicals and feedback with the course tutor helps to guide the path to follow. The course is not rushed and the concept is discussed properly", 
						  "The technology narrowed us in what we could actually do. I felt that the nordic board was too complex for doing easy stuff."],
			"Summary" : "The course 'Principles and Design of the Internet of Things Systems' (PDIoT) is concerned with the emerging discipline of digitising the physical world with wireless sensors, analysing the sensor data to provide actionable information, and influencing the physical world via actuators, with an optional human in the loop. The course imparts foundational concepts in IoT in a series of 10 lectures and students gain hands-on experience by realising their application idea as a demonstratable IoT system prototype. The lectures will be illustrated with a number of IoT case studies undertaken by the lecturer over the past fifteen years.",
			"Course Description" : "The course aims to deliver a sound understanding of the design and analysis of Internet of Things through lectures and practice. The lectures provide the foundational knowledge in sensors and actuators, fusion of data from multiple sensors, sensor data calibration and topics in sensor data analytics: pre-processing and extraction of features in time-series sensor data, and classification methods using a selection of machine learning techniques. The students conduct a major piece of coursework working in pairs to develop an application using an IoT platform together with a mobile application. Students will experience all the stages in the design and implementation of a complex system - from its specification to the demonstration of a working prototype. They will be exposed to aspects of embedded systems programming, sensor data analytics using machine learning, data collection, algorithm development, user interface design, mobile application design, system integration and testing. The goal is to develop a step counter which should detect walking on level ground and climbing stairs. Each student pair will be given an NRF52DK dev board with Bluetooth wireless connection, and triaxial accelerometer and gyroscope sensors. On-device firmware will be developed using the mbed platform and Android will be used for an accompanying mobile application. Each pair will demonstrate a working prototype at the end of 10 weeks and deliver a written report by the end of Week 1 in the second semester."
		},
		{
			"Name": "Randomness and Computation",
			"Code" : "INFR11089",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "67.50",
			"Area" : "Theory of Computation",
			"Prerequisites" : [],
			"Feedback" : ["Don't.", "The course is remarkably badly taught.", "Study on your own the material from the book. Don't go to the lectures or the tutorials. They're a waste of time."],
			"Summary" : "This course is about probabilistic methods and their application to computer science. The course introduces basic models and techniques and applies these techniques to the design of various randomized algorithms, data structures, and distributed protocols. Special emphasis will be given on applications of these ideas to other areas of computer science (e.g. networking, machine learning, etc).",
			"Course Description" : "- Introduction: Las Vegas and Monte Carlo algorithms (Elementary Examples: checking identities, fingerprinting) - Moments, Deviations and Tail Inequalities (Balls and Bins, Coupon Collecting, stable marriage, routing) - Randomization in Sequential Computation (Data Structures, Graph Algorithms) * Randomization in Parallel and Distributed Computation (algebraic techniques, matching, sorting, independent sets) * Randomization in Online Computation  (online model, adversary models, paging, k-server) - The Probabilistic Method (threshold phenomena in random graphs, Lovasz Local Lemma) - Random Walks and Markov Chains (hitting and cover times, Markov chain Monte Carlo)"
		},
		{
			"Name": "Software Architecture, Process, and Management",
			"Code" : "INFR11038",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "66.45",
			"Area" : "Software Engineering",
			"Prerequisites" : [],
			"Feedback" : ["Good overview and lecturer but content wise is a bit too light.", "Groupwork with 8-10 people per group (which were assigned by lecturer) is challenging",
						  "This course if definitely interesting for understanding the structure of software architecture and the group assignment does develop some useful skills."],
			"Summary" : "Large-scale systems differ from small-scale system in the challenges they pose in capturing, and managing the process of delivering systems that conform to, quality attribute requirements (e.g. availability, performance, security). Software Architecture provides a framework for managing these aspects of systems. This course introduces Software Architecture concepts and provides experience of the use of Software Architecture in the development process and management of systems.",
			"Course Description" : "Software Architecture: Quality Attributes; Large-scale systems; Quality Attribute Scenarios; Architectural Tactics; Design Checklists; Tradeoffs; Architectural Patterns; Product Lines; Exemplar Quality Attributes (Availability; Performance; Security; Testability; Usability; ¿); Case Studies (Apache, Linux, Real-time Architecture, Medical Systems, Banking Systems). Software Architecture in the Development Process: Architecture in Processes (Traditional Vmodel, Risk-centric, Agile), Process Improvement, Modern Developments (e.g. DevOps). Management Aspects: Tools through the process; planning; tracking; cost management; people and teams."
		},
		{
			"Name": "Secure Programming",
			"Code" : "INFR11098",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "61.51",
			"Area" : "Security and Cryptography",
			"Prerequisites" : [],
			"Feedback" : ["An interesting practical course", "Good if they enjoyed the Computer Security course.", 
						  "The labs had interesting content."],
			"Summary" : "This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).",
			"Course Description" : "- Security maintainance of deployed software systems, including 'penetrate-and-patch', vulnerability enumeration (CVE IDs) and classification (CWE taxonomy). - Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards. - Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware. - Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples. - Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance. - High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI. - Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software. - Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools. - Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation. - Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance."
		},
		{
			"Name": "Social and Technological Networks",
			"Code" : "INFR11124",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "72.40",
			"Area" : "Networks",
			"Prerequisites" : [],
			"Feedback" : ["Plan enough time for the coursework and meet the lecturer in his office to talk about your project. The descriptions are too vague and too open.",
						  "I found that the content was very relevant and inspiring. Provides a good perspective how people/things connect. This is very useful.",
						  "It's actually a very interesting topic, with a lot of real world applications. Real fun to learn about epidemics and influence in a network."],
			"Summary" : "In this course, we will study core properties of networks arising in various social, scientific and technological contexts. We will see techniques for their analysis, and applications in social networks, World Wide Web, Internet, IoT etc. The course will cover fundamental theories and techniques from machine learning, algorithms and mathematics. We will see the relevance of these techniques in real networks, as well as use of network-based techniques in more general data analysis. The course will involve theoretical analysis in class, development of algorithms, and writing of programs to analyse network data.",
			"Course Description" : "The course will study computational, mathematical and data analysis aspects of networks. Typical topics will include properties of social networks, epidemics, spread of innovation, random graphs, metric properties, preferential attachments and power law networks. It will cover relation to data analysis and machine learning: including clustering and community detection, submodularity, optimization, embedding (dimension reduction) and classification. Other current topics will be covered as appropriate."
		},
		{
			"Name": "Text Technologies for Data Science",
			"Code" : "INFR11145",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "71.57",
			"Area" : "Data Science",
			"Prerequisites" : ["Practical hands-on experience. The course content and coursework were very well connected and improved understanding.",
							   "I found the practical assignments interesting and informative. "],
			"Feedback" : [],
			"Summary" : "This course teaches the basic technologies required for text processing, focussing mainly on information retrieval and text classification. It gives a detailed overview of information retrieval and describes how search engines work. It also covers basic knowledge of the main steps for text classification. This course is a highly practical course, where at least 50% of what is taught in the course will be implemented from scratch in course works and labs, and students are required to complete a final project in small groups. All lectures, labs, and two course works will take place in Semester 1. The final group project will be due early Semester 2 by week 3 or 4.",
			"Course Description" : "Syllabus: * Introduction to IR and text processing, system components * Zipf, Heaps, and other text laws  * Pre-processing: tokenization, normalisation, stemming, stopping. * Indexing: inverted index, boolean and proximity search * Evaluation methods and measures (e.g., precision, recall, MAP, significance testing). * Query expansion * IR toolkits and applications * Ranked retrieval and learning to rank * Text classification: feature extraction, baselines, evaluation * Web search"
		},
		{
			"Name": "Types and Semantics for Programming Languages",
			"Code" : "INFR11114",
			"Credits" : "10",
			"Level" : "11",
			"Year" : "4",
			"Average" : "93.38",
			"Area" : "Programming Language",
			"Prerequisites" : [],
			"Feedback" : ["The lecturer explained very well in the lectures and motivated the knowledge technically and practically. The course is organised well by having a lecture followed by a tutorial to practice. The lecturer and tutors help to guide in the tutorials to understand the content of the lectures more.",
						  "The course teaches how to do formal proofs and formally reason about programming languages.",
						  "Small class. Better learning experience."],
			"Summary" : "Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on legal programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.",
			"Course Description" : "*Inductive definitions and proof by induction *Untyped and simply-typed lambda calculus. Variable binding. *Small step and big step semantics. *Progress and preservation theorems. *Products, sums, and list types. *Reference types and exceptions. *Subtyping. Subsumption and its understanding as inclusion or coercion. *Principles of operational semantics. *Key concepts of semantics: compositionality, adequacy, observational equivalence, full abstraction, and definability."
		}
	]
}